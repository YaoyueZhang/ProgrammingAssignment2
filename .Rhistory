## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
xinv <- NULL # this is where the result of inversion is stored
# A setter function, use this to set a matrix to object created by makeCacheMatrix function
# e.g makeCacheMatrix(testmatrix) # here we work on testmatrix
# makeCacheMatrix$set(testmatrix1) # here we work on testmatrix1
set <- function(y) {
x <<- y
xinv <<- NULL # it also initialises xinv to null
}
get <- function() x # return the input matrix
setInv <- function(inv) xinv <<- inv # set the inversed matrix
getInv <- function() xinv # return the inversed matrix
# return a list that contains these functions, so that we can use
# makeCacheMatrix object like these
# x <- makeCacheMatrix(testmatrix)
# x$set(newmatrix) # to change matrix
# x$get # to get the setted matrix
# x$setInv # to set the inversed matrix
# x$getInv # to get the inversed matrix
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
source(""programingAssignment2/cachematrix.R)
source("programingAssignment2/cachematrix.R")
source("ProgrammingAssignment2/cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4,2,2))
my_matrix$get()
my_matrix&getInverse()
my_matrix$getInv()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
xinv <- NULL # this is where the result of inversion is stored
# A setter function, use this to set a matrix to object created by makeCacheMatrix function
# e.g makeCacheMatrix(testmatrix) # here we work on testmatrix
# makeCacheMatrix$set(testmatrix1) # here we work on testmatrix1
set <- function(y) {
x <<- y
xinv <<- NULL # it also initialises xinv to null
}
get <- function() x # return the input matrix
setInv <- function(inv) xinv <<- inv # set the inversed matrix
getInv <- function() xinv # return the inversed matrix
# return a list that contains these functions, so that we can use
# makeCacheMatrix object like these
# x <- makeCacheMatrix(testmatrix)
# x$set(newmatrix) # to change matrix
# x$get # to get the setted matrix
# x$setInv # to set the inversed matrix
# x$getInv # to get the inversed matrix
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(1:4,2,2))
my_matrix&get()
my_matrix$get()
my_matrix$getInv()
cacheSolve(my_matrix)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
xinv <- NULL # this is where the result of inversion is stored
# A setter function, use this to set a matrix to object created by makeCacheMatrix function
# e.g makeCacheMatrix(testmatrix) # here we work on testmatrix
# makeCacheMatrix$set(testmatrix1) # here we work on testmatrix1
set <- function(y) {
x <<- y
xinv <<- NULL # it also initialises xinv to null
}
get <- function() x # return the input matrix
setInv <- function(inv) xinv <<- inv # set the inversed matrix
getInv <- function() xinv # return the inversed matrix
# return a list that contains these functions, so that we can use
# makeCacheMatrix object like these
# x <- makeCacheMatrix(testmatrix)
# x$set(newmatrix) # to change matrix
# x$get # to get the setted matrix
# x$setInv # to set the inversed matrix
# x$getInv # to get the inversed matrix
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInv()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setInv(inv)
inv
}
test <- matrix(1:4,2,2)
testCached <- makeCacheMatrix(test)
test$getInv
my_matrix <- makeCacheMatrix(matrix(1:4),2,2)
my_matrix <- makeCacheMatrix(matrix(1:4,2,2))
my_matrix$get()
my_matrix$getInv()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInv()
my_matrix$set(matrix(c(2,2,1,4),2,2))
my_matrix$get()
my_matrix$getInv()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
## makeCacheMatrix and cacheSolve are a pair of function used to
## store a matrix and cache its inverse
## makeCacheMatrix creates a special matrix object that can cache
## its inverse.
makeCacheMatrix <- function(x = matrix()) {
xinv <- NULL
set <- function(y) {
x <<- y
xinv <<- NULL
}
get <- function() x
setinv <- function(inv) xinv <<- inv
getinv <- function() xinv
list(set = set,
get = get,
setinv = setinv,
getinv = getinv)
}
## cacheSolve returns the inverse of the special matrix created
## by makeCachematrix above. If the inverse has already been
## calculated and the matrix has not been changed, then the
## cacheSolve should retrive the inverse from the cache directly.
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinv(inv)
inv
}
test <- makeCacheMatrix(matrix(1:4,2,2))
test$get()
test$getinv()
cachesolve(test)
cacheSolve(test)
cacheSolve(test)
